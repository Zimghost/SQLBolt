Find the title of each film.
SELECT Title 
FROM movies;

Find the director of each film 
SELECT director
FROM movies;

Find the title and director of each film
SELECT title,director
FROM movies;

Find the title and year of each film
SELECT title,year
FROM movies;

Find all the information about each film
SELECT *
FROM movies;

Find the movie with a row id of 6 
SELECT * 
FROM movies
WHERE id = 6;

Find the movies released in the years between 2000 and 2010
SELECT * 
FROM movies
WHERE year BETWEEN 2000 AND 2010;

Find the movies not released in the years between 2000 and 2010
SELECT * 
FROM movies
WHERE year NOT BETWEEN 2000 AND 2010;

Find the first 5 Pixar movies and their release year
SELECT title, year 
FROM movies
LIMIT 5;

Find all the Toy Story movies 
SELECT * 
FROM movies
WHERE title LIKE '%Toy Story%';

Find all the movies directed by John Lasseter
SELECT * 
FROM movies
WHERE director = 'John Lasseter';

Find all the movies (and director) not directed by John Lasseter
SELECT *
FROM movies
WHERE director <> 'John Lasseter'

Find all the WALL-* movies
SELECT *
FROM movies
WHERE title LIKE '%WALL-%'

List all directors of Pixar movies (alphabetically), without duplicate
SELECT DISTINCT director 
FROM movies
ORDER BY director;

List the last four Pixar movies released (ordered from most recent to least) 
SELECT *
FROM movies
ORDER BY year DESC
LIMIT 4;

List the first five Pixar movies sorted alphabetically
SELECT *
FROM movies
ORDER BY title
LIMIT 5;

List the next five Pixar movies sorted alphabetically 
SELECT *
FROM movies
ORDER BY title
LIMIT 5 
OFFSET 5; 

List all the Canadian cities and their populations.
SELECT City,Population 
FROM north_american_cities
WHERE Country = 'Canada';

Order all the cities in the United States by their latitude from north to south
SELECT City 
FROM north_american_cities
WHERE Country = 'United States'
ORDER BY Latitude DESC;

List the two largest cities in Mexico (by population) 
SELECT city
FROM North_american_cities
WHERE country = 'Mexico'
ORDER BY population DESC
LIMIT 2;

List the third and fourth largest cities (by population) in the United States and their population
SELECT city, population
FROM North_american_cities
WHERE country = 'United States'
ORDER BY population DESC
LIMIT 2 OFFSET 2;

Find the domestic and international sales for each movie 
SELECT title, domestic_sales,international_sales 
FROM movies
INNER JOIN Boxoffice
    ON movies.id = boxoffice.movie_id
ORDER BY title;

Show the sales numbers for each movie that did better internationally rather than domestically
SELECT title, domestic_sales,international_sales 
FROM movies
INNER JOIN Boxoffice
    ON movies.id = boxoffice.movie_id
WHERE international_sales > domestic_sales
ORDER BY title;

List all the movies by their ratings in descending order
SELECT title, rating
FROM movies
INNER JOIN Boxoffice
    ON movies.id = boxoffice.movie_id
ORDER BY rating DESC;

List all buildings and the distinct employee roles in each building (including empty buildings) 
SELECT DISTINCT building_name, role
FROM Buildings
LEFT JOIN Employees
    ON employees.building = buildings.building_name;

Find the name and role of all employees who have not been assigned to a building
SELECT name,role 
FROM employees
WHERE building IS NULL;

Find the names of the buildings that hold no employees
SELECT DISTINCT building_name
FROM buildings 
  LEFT JOIN employees
    ON building_name = building
WHERE role IS NULL;

List all movies that were released on even number years 
SELECT *
FROM movies
WHERE year % 2 = 0;

Find the longest time that an employee has been at the studio
SELECT MAX(years_employed)
FROM Employees;

For each role, find the average number of years employed by employees in that role 
SELECT role,AVG(years_employed)
FROM Employees
GROUP BY role;

Find the total number of employee years worked in each building 
SELECT Building,SUM(Years_employed)
FROM employees
GROUP BY building;

Find the number of Artists in the studio (without a HAVING clause) 
SELECT COUNT(role)
FROM Employees
WHERE role = 'Artist';

Find the number of Employees of each role in the studio
SELECT building,role,COUNT(role)
FROM Employees
GROUP BY Role
ORDER BY building;

Find the total number of years employed by all Engineers
SELECT role,SUM(years_employed)
FROM Employees
WHERE role = 'Engineer';
---------------------(Their Answer)--------------------------------------------
SELECT role, SUM(years_employed)
FROM employees
GROUP BY role
HAVING role = "Engineer";

Find the number of movies each director has directed
SELECT director,COUNT(director) 
FROM movies
GROUP BY director;

Find the total domestic and international sales that can be attributed to each director
SELECT director,SUM(Domestic_sales + International_sales) AS 'Total Sales'  
FROM movies
JOIN Boxoffice
    ON movies.id = Boxoffice.movie_id
GROUP BY director;

Add the studio's new production, Toy Story 4 to the list of movies (you can use any director)
INSERT INTO Movies(Title,Director) VALUES('Toy Story 4','John Lassester');

Toy Story 4 has been released to critical acclaim! It had a rating of 8.7, and made 340 million domestically and 270 million internationally. 
Add the record to the BoxOffice table. 
INSERT INTO Boxoffice VALUES(15,8.7,340000000,270000000);

The director for A Bug's Life is incorrect, it was actually directed by John Lasseter
UPDATE Movies
SET Director = 'John Lasseter'
WHERE id = 2;

The year that Toy Story 2 was released is incorrect, it was actually released in 1999
UPDATE Movies
SET  Year = '1999'
WHERE id = 3;

Both the title and director for Toy Story 8 is incorrect! The title should be "Toy Story 3" and it was directed by Lee Unkrich
UPDATE Movies
SET title = 'Toy Story 3', director = 'Lee Unkrich'
WHERE id = 11;

This database is getting too big, lets remove all movies that were released before 2005.
DELETE FROM Movies
WHERE year < 2005;

Andrew Stanton has also left the studio, so please remove all movies directed by him.
DELETE FROM Movies
WHERE Director = 'Andrew Stanton';

Create a new table named Database with the following columns:
– Name A string (text) describing the name of the database
– Version A number (floating point) of the latest version of this database
– Download_count An integer count of the number of times this database was downloaded
This table has no constraints. 
CREATE TABLE Database (
Name VARCHAR(50),
Version FLOAT,
Download_Count INT
);

